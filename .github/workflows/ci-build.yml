name: CI - Build and Test

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      platform-service: ${{ steps.filter.outputs.platform-service }}
      prompt-service: ${{ steps.filter.outputs.prompt-service }}
      runner: ${{ steps.filter.outputs.runner }}
      x2text-service: ${{ steps.filter.outputs.x2text-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker/dockerfiles/backend.Dockerfile'
            frontend:
              - 'frontend/**'
              - 'docker/dockerfiles/frontend.Dockerfile'
            platform-service:
              - 'platform-service/**'
              - 'docker/dockerfiles/platform.Dockerfile'
            prompt-service:
              - 'prompt-service/**'
              - 'docker/dockerfiles/prompt.Dockerfile'
            runner:
              - 'runner/**'
              - 'docker/dockerfiles/runner.Dockerfile'
            x2text-service:
              - 'x2text-service/**'
              - 'docker/dockerfiles/x2text.Dockerfile'

  test-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: unstract_test
          POSTGRES_PASSWORD: unstract_test
          POSTGRES_DB: unstract_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v2
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --group test
      
      - name: Run tests
        working-directory: ./backend
        env:
          DJANGO_SETTINGS_MODULE: backend.settings.test
          DB_HOST: localhost
          DB_USER: unstract_test
          DB_PASSWORD: unstract_test
          DB_NAME: unstract_test
          REDIS_HOST: localhost
        run: |
          source .venv/bin/activate
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  test-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  sonarcloud:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-images:
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend
          - frontend
          - platform-service
          - prompt-service
          - runner
          - x2text-service
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/dockerfiles/${{ matrix.service == 'platform-service' && 'platform' || matrix.service == 'prompt-service' && 'prompt' || matrix.service == 'x2text-service' && 'x2text' || matrix.service }}.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/unstract/${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/unstract/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/unstract/backend:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'