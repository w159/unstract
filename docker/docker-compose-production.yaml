version: '3.8'

include:
  - docker-compose-dev-essentials.yaml

services:
  # Backend service with production configuration
  backend:
    image: unstract/backend:${VERSION}
    container_name: unstract-backend
    restart: unless-stopped
    command: ["sh", "-c", "python manage.py migrate && gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --timeout 300"]
    env_file:
      - ../backend/.env
    depends_on:
      - db
      - redis
      - rabbitmq
      - reverse-proxy
      - minio
      - createbuckets
      - platform-service
      - prompt-service
      - x2text-service
    volumes:
      - prompt_studio_data:/app/prompt-studio-data
      - ./workflow_data:/data
      - ${TOOL_REGISTRY_CONFIG_SRC_PATH}:/data/tool_registry_config
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-backend
      - DJANGO_SETTINGS_MODULE=backend.settings.production
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=PathPrefix(`/api/v1`) || PathPrefix(`/deployment`)
      - traefik.http.services.backend.loadbalancer.server.port=8000
      - traefik.http.middlewares.backend-headers.headers.customrequestheaders.X-Forwarded-Proto=https
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery default worker with production settings
  worker:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery,celery_api_deployments --autoscale=${WORKER_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - rabbitmq
      - db
      - redis
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-worker
      - DJANGO_SETTINGS_MODULE=backend.settings.production
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - ${TOOL_REGISTRY_CONFIG_SRC_PATH}:/data/tool_registry_config
    healthcheck:
      test: ["CMD", "celery", "-A", "backend", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for managing logs and periodic tasks
  worker-logging:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-logging
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend worker --loglevel=info -Q celery_periodic_logs,celery_log_task_queue --autoscale=${WORKER_LOGGING_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - rabbitmq
      - db
      - redis
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-worker-logging
      - DJANGO_SETTINGS_MODULE=backend.settings.production
    labels:
      - traefik.enable=false

  # Celery worker for handling file processing tasks
  worker-file-processing:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-file-processing
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing worker --loglevel=info -Q file_processing,api_file_processing --autoscale=${WORKER_FILE_PROCESSING_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - rabbitmq
      - db
      - redis
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-worker-file-processing
      - DJANGO_SETTINGS_MODULE=backend.settings.production
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - ${TOOL_REGISTRY_CONFIG_SRC_PATH}:/data/tool_registry_config

  worker-file-processing-callback:
    image: unstract/backend:${VERSION}
    container_name: unstract-worker-file-processing-callback
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend.workers.file_processing_callback worker --loglevel=info -Q file_processing_callback,api_file_processing_callback --autoscale=${WORKER_FILE_PROCESSING_CALLBACK_AUTOSCALE}"
    env_file:
      - ../backend/.env
    depends_on:
      - rabbitmq
      - db
      - redis
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-worker-file-processing-callback
      - DJANGO_SETTINGS_MODULE=backend.settings.production
    labels:
      - traefik.enable=false
    volumes:
      - ./workflow_data:/data
      - ${TOOL_REGISTRY_CONFIG_SRC_PATH}:/data/tool_registry_config

  # Celery Beat
  celery-beat:
    image: unstract/backend:${VERSION}
    container_name: unstract-celery-beat
    restart: unless-stopped
    entrypoint: .venv/bin/celery
    command: "-A backend beat --scheduler django_celery_beat.schedulers:DatabaseScheduler -l INFO"
    env_file:
      - ../backend/.env
      - ./essentials.env
    depends_on:
        - db
        - rabbitmq
        - redis
    environment:
      - ENVIRONMENT=production
      - APPLICATION_NAME=unstract-celery-beat
      - DJANGO_SETTINGS_MODULE=backend.settings.production

  # Frontend React app with proper nginx configuration
  frontend:
    image: unstract/frontend:${VERSION}
    container_name: unstract-frontend
    restart: unless-stopped
    depends_on:
      - backend
      - reverse-proxy
    environment:
      - ENVIRONMENT=production
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
      - traefik.http.routers.frontend.priority=1
      - traefik.http.services.frontend.loadbalancer.server.port=80
      - traefik.http.middlewares.frontend-headers.headers.customrequestheaders.X-Forwarded-Proto=https
    volumes:
      - ./nginx-frontend-production.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  platform-service:
    image: unstract/platform-service:${VERSION}
    container_name: unstract-platform-service
    restart: unless-stopped
    env_file:
      - ../platform-service/.env
    depends_on:
      - redis
      - db
    labels:
      - traefik.enable=true
      - traefik.http.routers.platform-service.rule=PathPrefix(`/platform`)
      - traefik.http.services.platform-service.loadbalancer.server.port=3001
    environment:
      - ENVIRONMENT=production

  prompt-service:
    image: unstract/prompt-service:${VERSION}
    container_name: unstract-prompt-service
    restart: unless-stopped
    depends_on:
      - db
      - minio
      - createbuckets
      - rabbitmq
    env_file:
      - ../prompt-service/.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.prompt-service.rule=PathPrefix(`/prompt`)
      - traefik.http.services.prompt-service.loadbalancer.server.port=3003
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - ENVIRONMENT=production

  x2text-service:
    image: unstract/x2text-service:${VERSION}
    container_name: unstract-x2text-service
    restart: unless-stopped
    env_file:
      - ../x2text-service/.env
    depends_on:
      - db
    labels:
      - traefik.enable=true
      - traefik.http.routers.x2text-service.rule=PathPrefix(`/x2text`)
      - traefik.http.services.x2text-service.loadbalancer.server.port=3004
    environment:
      - ENVIRONMENT=production

  runner:
    image: unstract/runner:${VERSION}
    container_name: unstract-runner
    restart: unless-stopped
    env_file:
      - ../runner/.env
    volumes:
      - ./workflow_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
      - rabbitmq
    labels:
      - traefik.enable=true
      - traefik.http.routers.runner.rule=PathPrefix(`/runner`)
      - traefik.http.services.runner.loadbalancer.server.port=5002
    environment:
      - ENVIRONMENT=production

  # Override reverse-proxy configuration for production
  reverse-proxy:
    command: 
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--accesslog=true"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.network=unstract-network"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/traefik-dynamic.yaml"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik-dynamic.yaml:/traefik-dynamic.yaml
      - ./certs:/certs

volumes:
  prompt_studio_data:
  unstract_data:

networks:
  default:
    name: unstract-network