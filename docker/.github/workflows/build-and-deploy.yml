name: Build and Deploy Unstract

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: acrunstract21468.azurecr.io
  VERSION: ${{ github.sha }}
  DOCKER_BUILDKIT: 1

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # Job 1: Build and push all container images
  build-images:
    name: Build ${{ matrix.service.name }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: backend
            context: .
            dockerfile: ./docker/dockerfiles/backend.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=backend
              BUILD_PACKAGES_PATH=unstract
          
          - name: frontend
            context: .
            dockerfile: ./docker/dockerfiles/frontend.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=frontend
              REACT_APP_BACKEND_URL=
          
          - name: platform-service
            context: .
            dockerfile: ./docker/dockerfiles/platform.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=platform-service
          
          - name: prompt-service
            context: .
            dockerfile: ./docker/dockerfiles/prompt.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=prompt-service
          
          - name: x2text-service
            context: .
            dockerfile: ./docker/dockerfiles/x2text.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=x2text-service
          
          - name: runner
            context: .
            dockerfile: ./docker/dockerfiles/runner.Dockerfile
            build-args: |
              BUILD_CONTEXT_PATH=runner
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${REGISTRY%%.*}
      
      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/unstract/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.service.build-args }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/unstract/${{ matrix.service.name }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/unstract/${{ matrix.service.name }}:buildcache,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/unstract/${{ matrix.service.name }}:${{ env.VERSION }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service.name }}.sarif'
          category: 'trivy-${{ matrix.service.name }}'

  # Job 2: Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment:
      name: staging
      url: https://staging.unstract.example.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy to Container Apps
        run: |
          chmod +x ./docker/scripts/deploy-container-apps.sh
          ./docker/scripts/deploy-container-apps.sh staging ${{ env.VERSION }}
      
      - name: Run smoke tests
        run: |
          chmod +x ./docker/scripts/smoke-tests.sh
          ./docker/scripts/smoke-tests.sh https://staging.unstract.example.com

  # Job 3: Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.deploy_environment == 'production'
    environment:
      name: production
      url: https://unstract.example.com
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Deploy to Container Apps
        run: |
          chmod +x ./docker/scripts/deploy-container-apps.sh
          ./docker/scripts/deploy-container-apps.sh production ${{ env.VERSION }}
      
      - name: Run smoke tests
        run: |
          chmod +x ./docker/scripts/smoke-tests.sh
          ./docker/scripts/smoke-tests.sh https://unstract.example.com
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            docker/docker-compose.yaml
            docker/docker-compose-production.yaml

  # Job 4: Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Purge old images
        run: |
          # Keep only the last 10 images for each service
          services=("backend" "frontend" "platform-service" "prompt-service" "x2text-service" "runner")
          
          for service in "${services[@]}"; do
            echo "Cleaning up images for $service..."
            
            # Get all tags except the latest 10
            tags=$(az acr repository show-tags \
              --name ${REGISTRY%%.*} \
              --repository unstract/$service \
              --orderby time_desc \
              --output tsv | tail -n +11)
            
            # Delete old tags
            for tag in $tags; do
              echo "Deleting unstract/$service:$tag"
              az acr repository delete \
                --name ${REGISTRY%%.*} \
                --image unstract/$service:$tag \
                --yes
            done
          done